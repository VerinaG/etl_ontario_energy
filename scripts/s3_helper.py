import requests
import os
from airflow.exceptions import AirflowNotFoundException


def upload_file(s3_hook, file_obj, bucket_name, key):
    s3_hook.load_file_obj(
        file_obj=file_obj,
        bucket_name=bucket_name,
        key=key
    )


def pull_data(s3_hook, url_prefix, bucket_name, file_names, path=''):
    if type(file_names) == str:
        file_names = [file_names]
    for file_name in file_names:
        url = url_prefix + file_name
        response = requests.get(url, stream=True)
        
        # Ensure resource exists before uploading to S3
        if (response.status_code != 200): raise AirflowNotFoundException
        upload_file(s3_hook, response.raw, bucket_name, path + file_name)


def download_from_s3(s3_hook, bucket_name, file_names, path='', local_path=''):
    if type(file_names) == str:
        file_names = [file_names]
    for file_name in file_names:
        myfile = f'./data/intertie_load/{file_name}'
        # If file exists, delete it.
        if os.path.isfile(myfile):
            os.remove(myfile)
        key = path + file_name
        s3_hook.download_file(key=key,
                              bucket_name=bucket_name,
                              local_path=local_path,
                              use_autogenerated_subdir=False,
                              preserve_file_name=True)
